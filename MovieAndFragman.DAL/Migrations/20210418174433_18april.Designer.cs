// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAndFragman.DAL;

namespace MovieAndFragman.DAL.Migrations
{
    [DbContext(typeof(MovieAndFragmanDbContext))]
    [Migration("20210418174433_18april")]
    partial class _18april
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("FragComment");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CounterDisLike")
                        .HasColumnType("int");

                    b.Property<int>("CounterLike")
                        .HasColumnType("int");

                    b.Property<int>("CounterView")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Fragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.HasKey("GenreID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("GenreFragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("LoveLike")
                        .HasColumnType("bit");

                    b.Property<bool>("UnLike")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FragmanID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Url");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BrithDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivationCode = new Guid("e9f12416-1963-4b14-9d92-d07f01af3af6"),
                            BrithDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 4, 18, 20, 44, 33, 87, DateTimeKind.Local).AddTicks(4605),
                            FirstName = "admin",
                            IsActive = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 74, 209, 7, 154, 228, 190, 105, 100, 35, 42, 73, 240, 196, 207, 175, 70, 241, 190, 157, 54, 98, 86, 99, 90, 45, 174, 111, 166, 86, 8, 251, 106, 164, 253, 107, 56, 71, 194, 247, 195, 237, 78, 236, 47, 225, 80, 251, 77, 94, 180, 138, 56, 207, 78, 154, 146, 68, 114, 28, 5, 15, 235, 141, 201 },
                            PasswordSalt = new byte[] { 210, 58, 241, 166, 161, 176, 6, 7, 227, 253, 249, 176, 133, 154, 47, 231, 90, 20, 32, 238, 112, 67, 55, 138, 162, 168, 219, 233, 12, 12, 190, 32, 231, 63, 188, 21, 74, 116, 127, 29, 149, 0, 44, 148, 25, 77, 235, 175, 103, 204, 186, 44, 38, 32, 1, 113, 219, 125, 17, 143, 139, 75, 50, 231, 169, 46, 235, 202, 44, 117, 238, 192, 229, 12, 183, 3, 173, 121, 201, 195, 12, 19, 36, 11, 159, 44, 215, 84, 4, 97, 120, 14, 119, 39, 172, 118, 130, 198, 235, 37, 171, 199, 192, 206, 9, 155, 239, 79, 93, 0, 224, 33, 3, 102, 3, 201, 8, 97, 65, 24, 33, 109, 106, 228, 208, 115, 254, 113 },
                            UserName = "admin",
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("FragComments")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("FragComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Fragmans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.Genre", "Genre")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Ratings")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Urls")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("GenreFragmens");

                    b.Navigation("Ratings");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Navigation("GenreFragmens");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("Fragmans");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
