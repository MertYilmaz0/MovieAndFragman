// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAndFragman.DAL;

namespace MovieAndFragman.DAL.Migrations
{
    [DbContext(typeof(MovieAndFragmanDbContext))]
    [Migration("20210403182048_03April")]
    partial class _03April
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("FragComment");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Fragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.HasKey("GenreID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("GenreFragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("LoveLike")
                        .HasColumnType("bit");

                    b.Property<bool>("UnLike")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FragmanID");

                    b.ToTable("Url");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BrithDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivationCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            BrithDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 4, 3, 21, 20, 47, 834, DateTimeKind.Local).AddTicks(1782),
                            FirstName = "admin",
                            IsActive = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 201, 112, 2, 160, 194, 68, 233, 187, 19, 7, 194, 34, 110, 11, 244, 186, 201, 107, 249, 33, 218, 153, 184, 40, 252, 241, 241, 43, 177, 171, 113, 102, 102, 117, 238, 103, 141, 28, 210, 21, 62, 30, 66, 223, 87, 143, 250, 204, 238, 74, 0, 172, 215, 142, 50, 45, 70, 10, 199, 197, 116, 34, 139, 203 },
                            PasswordSalt = new byte[] { 146, 61, 142, 158, 98, 36, 14, 81, 103, 18, 2, 154, 236, 184, 73, 6, 252, 174, 158, 76, 253, 209, 211, 189, 164, 32, 0, 249, 229, 88, 83, 220, 165, 208, 78, 63, 98, 115, 230, 104, 171, 19, 82, 84, 217, 177, 232, 111, 81, 118, 148, 128, 154, 148, 215, 106, 215, 239, 163, 19, 229, 222, 164, 211, 109, 244, 172, 46, 60, 148, 207, 43, 202, 89, 21, 204, 66, 46, 164, 210, 66, 183, 219, 20, 128, 214, 185, 92, 177, 117, 83, 183, 27, 108, 150, 194, 232, 210, 47, 143, 224, 144, 180, 165, 120, 193, 55, 38, 157, 178, 17, 47, 120, 2, 142, 230, 161, 98, 132, 86, 89, 207, 37, 192, 40, 20, 166, 22 },
                            UserName = "admin",
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("FragComments")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("FragComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Fragmans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.Genre", "Genre")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Ratings")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Urls")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("GenreFragmens");

                    b.Navigation("Ratings");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Navigation("GenreFragmens");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("Fragmans");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
