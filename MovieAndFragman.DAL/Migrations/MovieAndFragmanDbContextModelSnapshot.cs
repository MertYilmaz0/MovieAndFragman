// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAndFragman.DAL;

namespace MovieAndFragman.DAL.Migrations
{
    [DbContext(typeof(MovieAndFragmanDbContext))]
    partial class MovieAndFragmanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("FragComment");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Fragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.HasKey("GenreID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("GenreFragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("LoveLike")
                        .HasColumnType("bit");

                    b.Property<bool>("UnLike")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "FragmanID");

                    b.HasIndex("FragmanID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FragmanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("UrlPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FragmanID");

                    b.ToTable("Url");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BrithDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActivationCode = new Guid("20cca3dc-4024-4e14-984c-a9f0a6eb1f21"),
                            BrithDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 4, 12, 22, 33, 48, 536, DateTimeKind.Local).AddTicks(1),
                            FirstName = "admin",
                            IsActive = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 77, 97, 95, 220, 247, 182, 224, 169, 112, 41, 168, 118, 20, 156, 156, 62, 43, 75, 128, 1, 111, 238, 162, 161, 143, 92, 207, 136, 204, 100, 12, 222, 238, 190, 13, 240, 166, 89, 30, 6, 205, 73, 81, 176, 192, 134, 234, 195, 167, 14, 25, 100, 75, 52, 213, 168, 202, 9, 163, 85, 26, 136, 124, 116 },
                            PasswordSalt = new byte[] { 205, 165, 176, 193, 212, 134, 41, 246, 216, 53, 17, 35, 61, 21, 71, 93, 174, 240, 40, 227, 126, 102, 51, 241, 95, 234, 195, 16, 254, 249, 115, 240, 96, 156, 229, 57, 40, 150, 195, 205, 143, 188, 165, 153, 209, 144, 142, 154, 157, 241, 144, 236, 27, 62, 107, 232, 158, 236, 203, 138, 80, 155, 73, 186, 199, 159, 82, 244, 48, 157, 211, 46, 161, 231, 154, 61, 184, 12, 90, 184, 86, 116, 165, 162, 55, 149, 48, 13, 202, 107, 57, 135, 36, 64, 186, 226, 133, 50, 54, 6, 234, 1, 85, 155, 240, 14, 136, 5, 142, 35, 4, 171, 184, 102, 139, 83, 84, 119, 92, 109, 133, 92, 209, 145, 122, 88, 253, 251 },
                            UserName = "admin",
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.FragComment", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("FragComments")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("FragComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Fragmans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.GenreFragman", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.Genre", "Genre")
                        .WithMany("GenreFragmens")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Rating", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Ratings")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieAndFragman.Model.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fragman");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Url", b =>
                {
                    b.HasOne("MovieAndFragman.Model.Entities.Fragman", "Fragman")
                        .WithMany("Urls")
                        .HasForeignKey("FragmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fragman");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Fragman", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("GenreFragmens");

                    b.Navigation("Ratings");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.Genre", b =>
                {
                    b.Navigation("GenreFragmens");
                });

            modelBuilder.Entity("MovieAndFragman.Model.Entities.User", b =>
                {
                    b.Navigation("FragComments");

                    b.Navigation("Fragmans");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
